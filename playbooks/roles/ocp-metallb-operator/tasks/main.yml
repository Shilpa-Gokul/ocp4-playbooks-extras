---
# tasks file for playbooks/roles/ocp-metallb-operator

- name: Check if cluster operators and nodes are healthy
  include_role:
    name: check-cluster-health

- name: Clean up
  block:
  - name: Get the name of cluster service version
    shell: oc get clusterserviceversion -n metallb-system | awk '{ if ($1 ~ /metallb/) print $1 }'
    register: metallb_csv

  - name: Get the name of subscription
    shell: oc get subscription -n metallb-system | awk '{ if ($1 ~ /metallb/) print $1 }'
    register: metallb_subscription

  - name: Get the name of operator group
    shell: oc get operatorgroup -n metallb-system | awk '{ if ($1 ~ /metallb/) print $1 }'
    register: metallb_operator_group

  - name: Get the instance of the metallb operator
    shell: oc get metallb -n metallb-system -ojsonpath="{.items[].metadata.name}"
    register: metallb_instance
    ignore_errors: true

  - name: Delete the instance of the metallb operator
    kubernetes.core.k8s:
      state: absent
      api_version: metallb.io/v1beta1
      kind: MetalLB
      name: "{{ metallb_instance.stdout }}"
      namespace: metallb-system
    when: metallb_instance.stdout|length > 0

  - name: Delete the subscription if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1alpha1
      kind: Subscription
      name: "{{ metallb_subscription.stdout }}"
      namespace: metallb-system
    when: metallb_subscription.stdout|length > 0

  - name: Delete the operator group if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1
      kind: OperatorGroup
      name: "{{ metallb_operator_group.stdout }}"
      namespace: metallb-system
    when: metallb_operator_group.stdout|length > 0

  - name: Delete the cluster service version if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      name: "{{ metallb_csv.stdout }}"
      namespace: metallb-system
    when: metallb_csv.stdout|length > 0

  - name: Check if all the pods has been deleted
    shell: oc get pods -n metallb-system --no-headers | wc -l
    register: metallb_pods
    until: metallb_pods.stdout|int == 0
    retries: 15
    delay: 60

  - name: Get custom resource definitions
    shell: oc get crd | awk '{print $1}'| grep metallb
    register: metallb_crds
    ignore_errors: true

  - name: Delete the custom resource definition if exists
    shell: oc delete crd {{ item }}
    loop: "{{ metallb_crds.stdout_lines }}"
    when: metallb_crds.stdout_lines|length > 0

  - name: Delete the MetalLB Operator if exists
    kubernetes.core.k8s:
      state: absent
      kind: Operator
      name: metallb-operator.metallb-system

  - name: Delete the namespace if exists
    kubernetes.core.k8s:
      state: absent
      kind: Namespace
      name: metallb-system

  - name: Check if the namespace gets deleted
    shell: oc get namespace --no-headers | grep metallb | wc -l
    register: metallb_namespace
    until: metallb_namespace.stdout|int == 0
    retries: 15
    delay: 30

  - name: Delete the workspace
    file:
      path: "{{ metallb_directory }}"
      state: "absent"
      mode: '0755'
  when: metallb_cleanup


- name: Deploy the MetalLB Operator
  block:
  - name: Setup custom catalog source
    block:
    - name: Include the global-secret-update role
      include_role:
          name: global-secret-update

    - name: Set fact variable for catalog source name
      set_fact:
        metallb_catalogsource: "metallb-custom-catalogsource"

    - name: Include role to create image content source policy and catalog source
      include_role:
        name: set-custom-catalogsource
      vars:
        custom_catalogsource_name: "{{ metallb_catalogsource }}"
        custom_catalogsource_display_name: "MetalLB Operator catalog source"
        custom_catalogsource_image: "{{ metallb_catalogsource_image }}"
    when: metallb_catalogsource_image != '' and metallb_catalogsource_image != None

  - name: Create namespace for metallb operator
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          labels:
            pod-security.kubernetes.io/audit: privileged
            pod-security.kubernetes.io/enforce: privileged
            pod-security.kubernetes.io/warn: privileged
            security.openshift.io/scc.podSecurityLabelSync: "false"
            kubernetes.io/metadata.name: metallb-system
            name: metallb-system
          name: metallb-system
        spec:
          finalizers:
          - kubernetes

  - name: Create operator group for metallb operator
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1
        kind: OperatorGroup
        metadata:
          generateName: metallb-system-
          name: metallb-system
          namespace: metallb-system
            #spec:
            #targetNamespaces:
            #- metallb-system

  - name: Create subscription for metallb operator
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          labels:
            operators.coreos.com/metallb-operator.metallb-system: ""
          name: metallb-operator-sub
          namespace: metallb-system
        spec:
          channel: "{{ metallb_upgrade_channel }}"
          installPlanApproval: Automatic
          name: metallb-operator
          source: "{{ metallb_catalogsource }}"
          sourceNamespace: openshift-marketplace
  when: metallb_install_operator

- name: Validate operator deployment and deploy instance of the metallb operator
  block:
  - name: Check if the subscription has created
    shell: oc get subscription metallb-operator-sub -n metallb-system | wc -l
    register: metallb_operators_subscription
    until: metallb_operators_subscription.stdout|int == 2

  - name: Check if the cluster service version has succeeded
    shell: oc get clusterserviceversion -n metallb-system | awk '{ if (($1 ~ /metallb/) && $NF=="Succeeded") print $1 }' | wc -l
    register: metallb_operators_csv
    until: metallb_operators_csv.stdout|int == 1
    retries: 15
    delay: 120

  - name: Check if operator pod is running
    shell: oc get pod -n metallb-system | grep "Running" | wc -l
    register: metallb_operator_pods
    until: metallb_operator_pods.stdout|int == 2
    retries: 10
    delay: 60

  - name: Check if the install plan is in the namespace
    shell: oc get installplan -n metallb-system | grep "install" | grep "metallb" | wc -l
    register: metallb_install_plan
    until: metallb_install_plan.stdout|int == 1

  - name: Create instance of the metallb operator
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: MetalLB
        metadata:
          name: metallb
          namespace: metallb-system

  - name: Check if all the pods are running
    shell: oc get pods -n metallb-system --no-headers | grep -v "Running\|Completed" | wc -l
    register: metallb_pods
    until: metallb_pods.stdout|int == 0 and metallb_pods.stderr == ""
    retries: 10
    delay: 60

  - name: Check if the deployment for the controller is running
    shell: oc get deployment -n metallb-system controller | awk '{if ($1 ~ /controller/) print $4}'
    register: metallb_controller
    until: metallb_controller.stdout|int == 1
    retries: 10
    delay: 40

  - name: Check the number of nodes running
    shell: oc get node | grep "Ready" | wc -l
    register: metallb_nodes
  - debug:
      msg: 
      - metallb_nodes {{metallb_nodes}}
  - name: Check if the daemon set for the speaker is running
    shell: oc get daemonset -n metallb-system speaker | awk '{if ($1 ~ /speaker/) print $6}'
    register: metallb_speaker
    until: metallb_speaker.stdout|int == metallb_nodes.stdout|int
    retries: 10
    delay: 60
  - debug:
      msg:
      - metallb_speaker {{metallb_speaker}}
      - metallb_nodes {{metallb_nodes}}
  when: metallb_install_operator or metallb_e2e

- name: Run e2e test cases
  block:
  - name: Install dependencies for running e2e tests
    dnf:
      name: make
      state: present

  - name: Include role for installation of Go lang
    include_role:
      name: golang-installation
    vars:
      go_tarball: "{{ metallb_golang_tarball }}"
      golang_path: "/usr/local"

  - name: Clone the metallb-operator repository
    git:
      repo: "{{ metallb_e2e_git_repository }}"
      dest: "{{ metallb_directory }}/metallb-operator"
      version: "{{ metallb_git_branch }}"

  - name: Run metallb-operator e2e tests
    shell: make test-e2e > {{ metallb_directory }}/metallb_e2e_output.txt
    args:
      chdir: "{{ metallb_directory }}/metallb-operator"
    ignore_errors: true
    environment: "{{ metallb_e2e_env }}"

  - name: Removing the color codes from output
    ansible.builtin.replace:
      path: "{{ metallb_directory }}/metallb_e2e_output.txt"
      regexp: '\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])'
      replace: ""
  when: metallb_e2e
- name: Validate the controller and speaker pods can be scheduled on the tainted nodes based on the tolerations in metallb CR
  block:
    - name: Check the number of nodes running
      shell: oc get node | grep "Ready" | wc -l
      register: metallb_nodes

    - name: Check if the daemon set for the speaker is running before tainting
      shell: oc get daemonset -n metallb-system speaker | awk '{if ($1 ~ /speaker/) print $6}'
      register: metallb_speaker_untainted
      until: metallb_nodes.stdout|int == metallb_speaker_untainted.stdout|int
      retries: 10
      delay: 60

    - name: Taint master and worker nodes
      shell: |
        oc adm taint node master-0 master-group=infra:NoSchedule
        oc adm taint node worker-0 worker-group=infra:NoSchedule
      register: taint_output
      ignore_errors: true

    - name: Create a metalLB CR with tolerations for worker-group in both controller and speaker pods
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
          spec:
            controllerTolerations:
              - effect: NoSchedule
                key: worker-group
                operator: Equal
                value: infra
            logLevel: debug
            speakerTolerations:
              - effect: NoSchedule
                key: worker-group
                operator: Equal
                value: infra

    - name: Check if all the pods are running
      shell: oc get pods -n metallb-system --no-headers | grep -v "Running\|Completed" | wc -l
      register: metallb_pods
      until: metallb_pods.stdout|int == 0 and metallb_pods.stderr == ""
      retries: 10
      delay: 30

    - name: Check if the deployment for the controller is running
      shell: oc get deployment -n metallb-system controller | awk '{if ($1 ~ /controller/) print $4}'
      register: metallb_controller
      until: metallb_controller.stdout|int == 1
      retries: 10
      delay: 40
    
    - name: Check if the daemon set are created properly
      shell: oc get daemonset -n metallb-system speaker | awk '{if ($1 ~ /speaker/) print $6}'
      register: metallb_speaker
      until: metallb_speaker.stdout|int == metallb_speaker_untainted.stdout|int-1
      retries: 10
      delay: 40

    - name: Get the instance of the metallb operator
      shell: oc get metallb -n metallb-system -ojsonpath="{.items[].metadata.name}"
      register: metallb_instance
      ignore_errors: true

    - name: Delete the MetalLB CR which has toleration for worker group
      kubernetes.core.k8s:
        state: absent
        api_version: metallb.io/v1beta1
        kind: MetalLB
        name: "{{ metallb_instance.stdout }}"
        namespace: metallb-system
      when: metallb_instance.stdout|length > 0

    - name: Check if the speakers are deleted
      shell: oc get daemonset -n metallb-system speaker
      register: metallb_speaker
      ignore_errors: true
      failed_when: "'NotFound' not in metallb_speaker.stderr"

    - name: Create a metalLB CR with tolerations for master-group in both controller and speaker pods
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
          spec:
            controllerTolerations:
              - effect: NoSchedule
                key: master-group
                operator: Equal
                value: infra
            logLevel: debug
            speakerTolerations:
              - effect: NoSchedule
                key: master-group
                operator: Equal
                value: infra

    - name: Check if the daemon set are created properly
      shell: oc get daemonset -n metallb-system speaker | awk '{if ($1 ~ /speaker/) print $6}'
      register: metallb_speaker
      until: metallb_speaker.stdout|int == metallb_speaker_untainted.stdout|int-1
      retries: 10
      delay: 40

    - name: Verify that no speaker pod is running on worker-0
      shell: oc get pod -n metallb-system -o wide | awk '{if (($1 ~ /speaker/) && ($7=="worker-0")) print $7}' | wc -l
      register: metallb_speaker
      failed_when: metallb_speaker.stdout|int > 0

    - name: Untaint master and worker nodes
      shell: |
        oc adm taint node master-0 master-group=infra:NoSchedule-
        oc adm taint node worker-0 worker-group=infra:NoSchedule-
      register: taint_output
      ignore_errors: true

    - name: Get the instance of the metallb operator
      shell: oc get metallb -n metallb-system -ojsonpath="{.items[].metadata.name}"
      register: metallb_instance
      ignore_errors: true

    - name: Delete the instance of the metallb operator
      kubernetes.core.k8s:
        state: absent
        api_version: metallb.io/v1beta1
        kind: MetalLB
        name: "{{ metallb_instance.stdout }}"
        namespace: metallb-system
      when: metallb_instance.stdout|length > 0
  when: metallb_e2e

- name: Validate controller and pod can be scheduled based on node selectors
  block:
    - name: Check if the pods are running properly
      shell: oc get pods -n metallb-system --no-headers | grep "Running\|Completed" | wc -l
      register: metallb_pods
      failed_when: metallb_pods.stdout|int != 2

    - name: Create a node selector CR
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
          spec:
            controllerNodeSelector:
              kubernetes.io/hostname: worker-0
            nodeSelector:
              node-role.kubernetes.io/worker: worker-0

    - name: Check if the controller pod is getting created only on worker-0 based on node selector
      shell: oc get pods -n metallb-system -o wide --no-headers | awk '{if ($1 ~ /^controller/) print $7}'
      register: metallb_controller_pod
      failed_when: "'worker-0' not in metallb_controller_pod.stdout"

    - name: Get the instance of the metallb operator
      shell: oc get metallb -n metallb-system -ojsonpath="{.items[].metadata.name}"
      register: metallb_instance
      ignore_errors: true

    - name: Delete the instance of the metallb operator
      kubernetes.core.k8s:
        state: absent
        api_version: metallb.io/v1beta1
        kind: MetalLB
        name: "{{ metallb_instance.stdout }}"
        namespace: metallb-system
      when: metallb_instance.stdout|length > 0

  when: metallb_e2e

- name: Validate controller and speaker pods can be scheduled based on affinity
  block:
    - name: Label two worker nodes with labels zone=east and zone west respectively
      shell: |
        oc label node worker-0 zone=east
        oc label node worker-1 zone=west

    - name: Create a metallb CR with controller and speaker pod based on (required) node affinity matchExpression
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
          spec:
            controllerConfig:
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                          - key: zone
                            operator: In
                            values:
                              - east
              speakerConfig:
                affinity:
                  nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      nodeSelectorTerms:
                        - matchExpressions:
                            - key: zone
                              operator: In
                              values:
                                - west
    - name: Check if the controller is getting created on worker-0
      shell: oc get pods -n metallb-system -o wide --no-headers | awk '{if ($1 ~ /^controller/) print $7}'
      register: metallb_controller_pod
      until: "'worker-0' in metallb_controller_pod.stdout"
      retries: 5
      delay: 20

    - name: Check if the speaker pod is getting created on worker-1
      shell: oc get pods -n metallb-system -o wide --no-headers | awk '{if ($1 ~ /^speaker/) print $7}'
      register: metallb_speaker_pod
      until: "'worker-1' in metallb_speaker_pod.stdout"
      retries: 5
      delay: 20

    - name: Get the instance of the metallb operator
      shell: oc get metallb -n metallb-system -ojsonpath="{.items[].metadata.name}"
      register: metallb_instance
      ignore_errors: true

    - name: Delete the instance of the metallb operator
      kubernetes.core.k8s:
        state: absent
        api_version: metallb.io/v1beta1
        kind: MetalLB
        name: "{{ metallb_instance.stdout }}"
        namespace: metallb-system
      when: metallb_instance.stdout|length > 0

    # Create a metalLB CR based on node affinity using matchFields
    - name: Create a metallb CR with controller and speaker pod based on ( required) node affinity using matchFields
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
          spec:
            controllerConfig:
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchFields:
                          - key: metadata.name
                            operator: In
                            values:
                              - worker-0
              speakerConfig:
                affinity:
                  nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      nodeSelectorTerms:
                        - matchFields:
                            - key: metadata.name
                              operator: In
                              values:
                                - worker-1

    # Verification of node affinity using matchFields
    - name: Check if the controller is getting created on worker-0
      shell: oc get pods -n metallb-system -o wide --no-headers | awk '{if ($1 ~ /^controller/) print $7}'
      register: metallb_controller_pod
      until: "'worker-0' in metallb_controller_pod.stdout"
      retries: 5
      delay: 20

    - name: Check if the speaker pod is getting created on worker-1
      shell: oc get pods -n metallb-system -o wide --no-headers | awk '{if ($1 ~ /^speaker/) print $7}'
      register: metallb_speaker_pod
      until: "'worker-1' in metallb_speaker_pod.stdout"
      retries: 5
      delay: 20

    - name: Get the instance of the metallb operator
      shell: oc get metallb -n metallb-system -ojsonpath="{.items[].metadata.name}"
      register: metallb_instance
      ignore_errors: true

    - name: Delete the instance of the metallb operator
      kubernetes.core.k8s:
        state: absent
        api_version: metallb.io/v1beta1
        kind: MetalLB
        name: "{{ metallb_instance.stdout }}"
        namespace: metallb-system
      when: metallb_instance.stdout|length > 0

    # Create a metalLB CR to ensure pod affinity is honored for controller and speaker
    - name: Create a sample nginx pod in same namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: nginx-test
            namespace: metallb-system
            labels:
              name: test-only-pod
          spec:
            containers:
              - name: nginx-test
                image: nginx

    - name: Create a metallb CR with controller and speaker pod based on ( required) node affinity using matchFields
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
          spec:
            controllerConfig:
              affinity:
                podAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    - labelSelector:
                        matchExpressions:
                          - key: name
                            operator: In
                            values:
                              - test-only-pod
                      topologyKey: kubernetes.io/hostname

            logLevel: debug
            speakerConfig:
              affinity:
                podAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    - labelSelector:
                        matchExpressions:
                          - key: name
                            operator: In
                            values:
                              - test-only-pod
                      topologyKey: kubernetes.io/hostname
    # Verification of pod affinity
    - name: Get the node on where nginx is run
      shell: oc get pods -n metallb-system -o wide --no-headers | awk '{if ($1 ~ /nginx/) print $7}'
      register: nginx_node

    - name: Check if the controller is getting created on same node as per the label mentioned in CR
      shell: oc get pods -n metallb-system -o wide --no-headers | awk '{if (($1 ~ /^controller/) && ($3=="Running")) print $7}'
      register: metallb_controller_node
      until: metallb_controller_node.stdout == nginx_node.stdout
      retries: 5
      delay: 20

    - name: Check if the speaker pod is getting created on same node as per the label mentioned in CR
      shell: oc get pods -n metallb-system -o wide --no-headers | awk '{if (($1 ~ /^speaker/) && ($3=="Running")) print $7}'
      register: metallb_speaker_node
      until: metallb_speaker_node.stdout == nginx_node.stdout
      retries: 5
      delay: 20

    - name: Get the instance of the metallb operator
      shell: oc get metallb -n metallb-system -ojsonpath="{.items[].metadata.name}"
      register: metallb_instance
      ignore_errors: true

    - name: Delete the instance of the metallb operator
      kubernetes.core.k8s:
        state: absent
        api_version: metallb.io/v1beta1
        kind: MetalLB
        name: "{{ metallb_instance.stdout }}"
        namespace: metallb-system
      when: metallb_instance.stdout|length > 0
    
    # Create metalLB CR with pod anti affinity rule
    - name: Create a metallb CR with with pod anti affinity rule
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
          spec:
            controllerConfig:
              affinity:
                podAntiAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    - labelSelector:
                        matchExpressions:
                          - key: name
                            operator: In
                            values:
                              - test-only-pod
                      topologyKey: kubernetes.io/hostname
            speakerConfig:
              nodeSelector:
                node-role.kubernetes.io/worker: ''
              affinity:
                podAntiAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    - labelSelector:
                        matchExpressions:
                          - key: name
                            operator: In
                            values:
                              - test-only-pod
                      topologyKey: kubernetes.io/hostname 
    # Verification
    - name: Check if the controller is getting created on a different node than the pod with label
      shell: oc get pods -n metallb-system -o wide --no-headers | awk '{if (($1 ~ /^controller/) && ($3=="Running")) print $7}'
      register: metallb_controller_node
      until: metallb_controller_node.stdout != nginx_node.stdout
      retries: 5
      delay: 20
    - name: Check if the speakers are getting created on a different node than the pod with label
      shell: oc get pods -n metallb-system -o wide --no-headers | awk '{if (($1 ~ /^speaker/) && ($3=="Running")) print $7}'
      register: metallb_speaker_node
      failed_when: "'$nginx_node.stdout' in metallb_speaker_node.stdout"
    
    - name: Get the instance of the metallb operator
      shell: oc get metallb -n metallb-system -ojsonpath="{.items[].metadata.name}"
      register: metallb_instance
      ignore_errors: true

    - name: Delete the instance of the metallb operator
      kubernetes.core.k8s:
        state: absent
        api_version: metallb.io/v1beta1
        kind: MetalLB
        name: "{{ metallb_instance.stdout }}"
        namespace: metallb-system
      when: metallb_instance.stdout|length > 0

    - name: Delete the nginx pod created during the test
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: Pod
        name: nginx-test
        namespace: metallb-system

  when: metallb_e2e

# Validate Community creation and update
- name: Validate Community creation and update
  block:
    - name: Create a community name community1
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: Community
          metadata:
            name: community1
            namespace: metallb-system
          spec:
            communities:
            - name: NO_ADVERTISE
              value: 65535:65282
    # Edit the community1 to add same entry of community to see error
    - name: Add same entry of community
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: Community
          metadata:
            name: community1
            namespace: metallb-system
          spec:
            communities:
            - name: NO_ADVERTISE
              value: 65535:65282
            - name: NO_ADVERTISE
              value: 65535:65282
      register: community_output
      failed_when: "'duplicate definition of community' not in community_output.msg"
      ignore_errors: true
  when: metallb_e2e

# Verify L2 LoadBalancer service type are created on non cloud clusters
- name: Verify L2 LoadBalancer service type are created on non cloud clusters
  block:
    - name: Create CR for metallb on worker node
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
          spec:
            nodeSelector:
              node-role.kubernetes.io/worker: ''

    - name: Check if all the pods are running
      shell: oc get pods -n metallb-system --no-headers | grep -v "Running\|Completed" | wc -l
      register: metallb_pods
      until: metallb_pods.stdout|int == 0 and metallb_pods.stderr == ""
      retries: 10
      delay: 30

    - name: Create a project
      shell: oc new-project test1

    - name: Configure an address pool in the namespace where metallb is installed
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: address-pool-silver
            namespace: metallb-system
          spec:
            protocol: layer2
            addresses:
              - 9.114.98.36-9.114.98.36
              - 9.114.99.246-9.114.99.246
    - name: Create a replica set and service of type LoadBalanncer
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: ReplicaSet
          metadata:
            name: hello-world
            namespace: test1
            labels:
              app: hello-world
          spec:
            selector:
              matchLabels:
                app: hello-world
            replicas: 2
            template:
              metadata:
                labels:
                  app: hello-world
              spec:
                containers:
                  - name: hello-world
                    image: quay.io/openshifttest/hello-openshift:1.2.0
                    imagePullPolicy: Always
                    ports:
                      - containerPort: 8080
                        protocol: TCP

    - name: Create a replica set and service of type LoadBalanncer
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: hello-world
            namespace: test1
            annotations:
              metallb.universe.tf/address-pool: address-pool-silver
          spec:
            selector:
              app: hello-world
            ports:
              - port: 80
                targetPort: 8080
                protocol: TCP
            type: LoadBalancer

    - name: Check if all the pods are running
      shell: oc get pods -n test1 --no-headers | grep "Running\|Completed" | wc -l
      register: metallb_pods
      until: metallb_pods.stdout|int == 2
      retries: 5
      delay: 20

    - name: Check if the replicaset is proper
      shell: oc get rs -n test1 --no-headers | awk '{if ($1 ~ /^hello/) print $4}'
      register: metallb_rs
      failed_when: metallb_rs.stdout|int != 2

    - name: Check if the loadbalancer service is proper
      shell: oc get svc -n test1 --no-headers | awk '{if ($2 ~ /LoadBalancer/)  print $4}'
      register: metallb_svc
      failed_when: metallb_svc.stdout != "9.114.99.246"

    # Verification
    - name: Check if the service is reachable
      shell: oc debug node/master-0 -- chroot /host curl -I http://{{ metallb_svc.stdout }}
      register: metallb_svc
      failed_when: "'200 OK' not in metallb_svc.stdout"

    - name: Delete the project
      shell: oc delete project test1
  when: metallb_e2e

# Validate controller and speaker pods are scheduled on nodes based priority class and run time class
- name: Validate controller and speaker pods are scheduled on nodes based priority class and run time class
  block:
    - name: Check if all the pods are running
      shell: oc get pods -n metallb-system --no-headers | grep -v "Running\|Completed" | wc -l
      register: metallb_pods
      until: metallb_pods.stdout|int == 0 and metallb_pods.stderr == ""
      retries: 10
      delay: 60

    # Create a metalLB CR with priority class set
    - name: Create a metalLB CR with priority class set
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
          spec:
            controllerConfig:
              priorityClassName: high-priority
            speakerConfig:
              priorityClassName: high-priority

    # Verify that the speaker and controller pods are not created as the priority class doesnt exist yet
    - name: Check if all the pods are running
      shell: oc get pods -n metallb-system --no-headers | grep "speaker\|^controller" | wc -l
      register: metallb_pods
      failed_when: metallb_pods.stdout|int != 0

    # Create the priority class to see controller and speaker pods are created
    - name: Create the priority class to see controller and speaker pods are created
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: scheduling.k8s.io/v1
          kind: PriorityClass
          metadata:
            name: high-priority
          value: 1000000
          globalDefault: false
          description: "This priority class should be used for metallb controller and speaker pods only."

    - name: Get the priority class
      shell: oc get priorityclass --no-headers | grep "high-priority" | wc -l
      register: priorityclass_op
      failed_when: priorityclass_op.stdout|int != 1

    - name: Check if the speaker and controller pods are running
      shell: oc get pods -n metallb-system --no-headers | grep "speaker\|^controller" | wc -l
      register: metallb_pods
      failed_when: metallb_pods.stdout|int < 0
    - name: Get the instance of the metallb operator
      shell: oc get metallb -n metallb-system -ojsonpath="{.items[].metadata.name}"
      register: metallb_instance
      ignore_errors: true

    - name: Delete the instance of the metallb operator
      kubernetes.core.k8s:
        state: absent
        api_version: metallb.io/v1beta1
        kind: MetalLB
        name: "{{ metallb_instance.stdout }}"
        namespace: metallb-system
      when: metallb_instance.stdout|length > 0

    - name: Delete the priority class
      kubernetes.core.k8s:
        state: absent
        api_version: scheduling.k8s.io/v1
        kind: PriorityClass
        name: high-priority
  when: metallb_e2e

# Verify static address is associated with LoadBalancer service if it is specified in YAML
- name: Verify static address is associated with LoadBalancer service if it is specified in YAML
  block:
    - name: Create a metalLB CR
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
    - name: Create a address pool with set of IP addresses intended to be used as static IP using autoAssign False
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: address-pool-static
            namespace: metallb-system
          spec:
            protocol: layer2
            addresses:
              - 9.114.97.247-9.114.97.247
            autoAssign: false

    - name: Check if the addresspool is proper
      shell: oc get IPaddresspool -n metallb-system | grep "address-pool-static" | wc -l
      register: metallb_adpool
      failed_when: metallb_adpool.stdout|int != 1

    - name: Create a new project test
      shell: oc new-project test

    - name: Create a service of type LoadBalancer using one of the IP addresses of node for EXTERNAL_IP
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: List
          items:
            - apiVersion: v1
              kind: ReplicationController
              metadata:
                labels:
                  name: hello-idle
                name: hello-idle
                namespace: test
              spec:
                replicas: 2
                selector:
                  name: hello-idle
                template:
                  metadata:
                    labels:
                      name: hello-idle
                  spec:
                    containers:
                      - image: quay.io/openshifttest/hello-openshift:1.2.0
                        name: hello-idle
                        ports:
                          - containerPort: 8080
                            protocol: TCP
                        resources:
                          limits:
                            cpu: 200m
                            memory: 256Mi
                          requests:
                            cpu: 100m
                            memory: 256Mi
                        terminationMessagePath: /dev/termination-log
                    dnsPolicy: ClusterFirst
                    restartPolicy: Always
                    securityContext: { }
                    terminationGracePeriodSeconds: 30
            - apiVersion: v1
              kind: Service
              metadata:
                name: hello-idle
                namespace: test
                annotations:
                  metallb.universe.tf/address-pool: address-pool-static
              spec:
                ports:
                  - port: 80
                    targetPort: 8080
                    protocol: TCP
                selector:
                  name: hello-idle
                type: LoadBalancer
                loadBalancerIP: 9.114.97.247

    - name: Check the service EXTERNAL_IP
      shell: oc get svc --no-headers | awk '{if ($1 ~ /^hello/) print $4}'
      register: svc_ip
      failed_when: svc_ip.stdout != "9.114.97.247"

    #Delete the service and replication controllers
    - name: Delete the IP address pool
      kubernetes.core.k8s:
        state: absent
        api_version: metallb.io/v1beta1
        kind: IPAddressPool
        name: address-pool-static
        namespace: metallb-system

    - name: Delete the replication controllers
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: ReplicationController
        name: hello-idle
        namespace: test

    - name: Delete the replication controllers
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: Service
        name: hello-idle
        namespace: test

    - name: Delete the project
      shell: oc delete project test

  when: metallb_e2e

# Verify the logging level of MetalLB can be changed for debugging
- name: Verify the logging level of MetalLB can be changed for debugging
  block:
    - name: Create a metalLB CR
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system

    - name: Check if all the pods are running
      shell: oc get pods -n metallb-system --no-headers | grep -v "Running\|Completed" | wc -l
      register: metallb_pods
      until: metallb_pods.stdout|int == 0 and metallb_pods.stderr == ""
      retries: 10
      delay: 60

    - name: Check the clusterserviceversion
      shell: oc get csv -n metallb-system --no-headers | grep "metallb" | wc -l
      register: metallb_csv
      failed_when: metallb_csv.stdout|int != 1

    - name: Fetch one speaker pod name
      shell: oc get pods -n metallb-system --no-headers | awk '{if ($1 ~ /^speaker/) {print$1;exit;}}'
      register: speaker_pod

    - name: Check the current log level
      shell: oc get pods {{ speaker_pod.stdout }} -n metallb-system -oyaml | grep log-level
      register: log_level
      failed_when: "'info' not in log_level.stdout"

    - name: Update log level to debug
      shell: oc patch --type=merge metallbs.metallb.io metallb -p '{"spec":{"logLevel":"debug"}}' -n metallb-system

    - name: Sleep for 120 seconds for the speaker pods to be recreated
      wait_for:
        delay: 120
        timeout: 0

    - name: Wait for the speaker pods to be recreated
      shell: oc get pods -n metallb-system --no-headers | awk '{if ($1 ~ /^speaker/) {print$1;exit;}}'
      register: speaker_pod

    - name: Check if the log level is changed to debug
      shell: oc get pods {{ speaker_pod.stdout }} -n metallb-system -oyaml | grep log-level
      register: log_level
      failed_when: "'debug' not in log_level.stdout"

    - name: Check the logs in 'speaker' container of speaker pod to see log level debug
      shell: oc logs {{ speaker_pod.stdout }} -n metallb-system | grep "debug" | tail -10 | wc -l
      register: log_output
      failed_when: log_output.stdout|int < 0

  when: metallb_e2e

# The L2 service with externalTrafficPolicy Local continues to service requests even when node with endpoints goes down
- name: The L2 service with externalTrafficPolicy Local continues to service requests even when node with endpoints goes down
  block:
    - name: Create a address pool with addresses from the locked ip
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: address-pool-silver
            namespace: metallb-system
          spec:
            protocol: layer2
            addresses:
              - 9.114.99.71-9.114.99.71
              - 9.114.99.140-9.114.99.140
    - name: Create a replica set more than 2 in a project to ensure replica pods are distributed across worker nodes
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: ReplicaSet
          metadata:
            name: hello-world
            labels:
              app: hello-world
          spec:
            selector:
              matchLabels:
                app: hello-world
            replicas: 8
            template:
              metadata:
                labels:
                  app: hello-world
              spec:
                containers:
                  - name: hello-world
                    image: quay.io/openshifttest/hello-openshift:1.2.0
                    imagePullPolicy: Always
                    ports:
                      - containerPort: 8080
                        protocol: TCP

    - name: Create a service with externalTrafficPolicy Cluster (default)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: hello-world
          spec:
            selector:
              app: hello-world
            ports:
              - port: 80
                targetPort: 8080
                protocol: TCP
            type: LoadBalancer

    # TODO: Reboot the node and verify
  when: metallb_e2e

# Verify one address can be associated with more than one service using annotation metallb.universe.tf/allow-shared-ip
- name: Verify one address can be associated with more than one service using annotation metallb.universe.tf/allow-shared-ip
  block:
    - name: Create IP Address pool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: address-pool-static
            namespace: metallb-system
          spec:
            protocol: layer2
            addresses:
              - 9.114.99.71-9.114.99.71

    - name: Create new project
      shell: oc new-project test

    - name: Create two services with same set of backend pods and same IP address but different protocol in project test
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: List
          items:
            - apiVersion: v1
              kind: ReplicationController
              metadata:
                labels:
                  name: web-server-rc
                name: web-server-rc
                namespace: test
              spec:
                replicas: 2
                template:
                  metadata:
                    labels:
                      name: web-server-rc
                  spec:
                    containers:
                      - image: quay.io/openshifttest/hello-openshift:1.2.0
                        name: nginx
            - apiVersion: v1
              kind: Service
              metadata:
                labels:
                  name: service-secure
                name: service-secure
                namespace: test
                annotations:
                  metallb.universe.tf/IPAddress-pool: address-pool-static
                  metallb.universe.tf/allow-shared-ip: "web-server-svc"
              spec:
                ports:
                  - name: https
                    port: 27443
                    protocol: TCP
                    targetPort: 8443
                selector:
                  name: web-server-rc
                type: LoadBalancer
                loadBalancerIP: 9.114.99.71
            - apiVersion: v1
              kind: Service
              metadata:
                labels:
                  name: service-unsecure
                name: service-unsecure
                namespace: test
                annotations:
                  metallb.universe.tf/IPAddress-pool: address-pool-static
                  metallb.universe.tf/allow-shared-ip: "web-server-svc"
              spec:
                ports:
                  - name: http
                    port: 27017
                    protocol: TCP
                    targetPort: 8080
                selector:
                  name: web-server-rc
                type: LoadBalancer
                loadBalancerIP: 9.114.99.71

    - name: Check if the services are created
      shell: oc get svc -n test | grep 9.114.99.71 | wc -l
      register: svc_count
      failed_when: svc_count.stdout|int != 2
      
    # verify reachability using curl command from master node
    - name: Check if the service is reachable
      shell: oc debug node/master-0 -- chroot /host curl -I http://9.114.99.71:27017
      register: metallb_svc
      failed_when: "'200 OK' not in metallb_svc.stdout"

    - name: Delete the IP address pool
      kubernetes.core.k8s:
        state: absent
        api_version: metallb.io/v1beta1
        kind: IPAddressPool
        name: address-pool-static
        namespace: metallb-system

    - name: Delete the replication controller
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: ReplicationController
        name: web-server-rc
        namespace: test

    - name: Delete the secure service
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: Service
        name: service-secure
        namespace: test

    - name: Delete the unsecure service
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: Service
        name: service-unsecure
        namespace: test

    - name: Delete the project test
      shell: oc delete project test

  when: metallb_e2e

# Validate L2 advertisement creation and update
- name: Validate L2 advertisement creation and update
  block:
    - name: Check if all the pods are running
      shell: oc get pods -n metallb-system --no-headers | grep -v "Running\|Completed" | wc -l
      register: metallb_pods
      until: metallb_pods.stdout|int == 0 and metallb_pods.stderr == ""
      retries: 10
      delay: 60

    - name: Create IP Address pool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: ip-addresspool-l2
            namespace: metallb-system
          spec:
            protocol: layer2
            addresses:
              - 9.114.99.71/32
            autoAssign: true

    - name: Create another IP Address pool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            labels:
              zone: east
            name: ip-addresspool-l2-a
            namespace: metallb-system
          spec:
            protocol: layer2
            addresses:
              - 9.114.97.247/32
            autoAssign: true

    - name: Verify the IP Address pool created
      shell: oc get ipaddresspool -n metallb-system --no-headers | grep "ip-addresspool" | wc -l
      register: address_pool
      failed_when: address_pool.stdout|int != 2

    - name: Create L2 advertisement
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: l2-adv
            namespace: metallb-system
          spec:
            ipAddressPoolSelectors:
              - matchExpressions:
                - key: zone
                  operator: In
                  values:
                    - east

    - name: Validate if the L2Advertisement is successfully created
      shell: oc get l2advertisement -n metallb-system --no-headers | grep l2-adv | wc -l
      register: l2adv
      failed_when: l2adv.stdout|int != 1

    - name: Edit L2 advertisement object with address pool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: l2-adv
            namespace: metallb-system
          spec:
            ipAddressPoolSelectors:
              - matchExpressions:
                - key: zone
                  operator: In
                  values:
                    - east
            ipAddressPools:
              - ip-addresspool-l2

    - name: Edit L2 advertisement object with same ip address pool name to see error
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: l2-adv
            namespace: metallb-system
          spec:
            ipAddressPoolSelectors:
              - matchExpressions:
                - key: zone
                  operator: In
                  values:
                    - east
            ipAddressPools:
              - ip-addresspool-l2
              - ip-addresspool-l2
      register: l2adverror
      ignore_errors: true
      failed_when: "'duplicate definition' not in l2adverror.msg"

    - name: Edit L2 advertisement object to add node selector
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: l2-adv
            namespace: metallb-system
          spec:
            ipAddressPoolSelectors:
              - matchExpressions:
                - key: zone
                  operator: In
                  values:
                    - east
            ipAddressPools:
              - ip-addresspool-l2
            nodeSelectors:
              - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                    - worker-0

    - name: Edit L2 advertisement object to add same node to see error
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: l2-adv
            namespace: metallb-system
          spec:
            ipAddressPoolSelectors:
              - matchExpressions:
                - key: zone
                  operator: In
                  values:
                    - east
            ipAddressPools:
              - ip-addresspool-l2
            nodeSelectors:
              - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                    - worker-0
                    - worker-0
      register: l2adverror
      ignore_errors: true
      failed_when: "'duplicate definition' not in l2adverror.msg"

    # Edit L2 advertisement object to add non existent node to see error- Doesnt throw error
#    - name: Edit L2 advertisement object to add non existent node to see error
#      kubernetes.core.k8s:
#        state: present
#        definition:
#          apiVersion: metallb.io/v1beta1
#          kind: L2Advertisement
#          metadata:
#            name: l2-adv
#            namespace: metallb-system
#          spec:
#            ipAddressPoolSelectors:
#              - matchExpressions:
#                - key: zone
#                  operator: In
#                  values:
#                    - east
#            ipAddressPools:
#              - ip-addresspool-l2
#            nodeSelectors:
#              - matchExpressions:
#                - key: kubernetes.io/hostname
#                  operator: In
#                  values:
#                    - worker-0
#                    - worker-123
#      register: l2adverror
#      ignore_errors: true
#      failed_when: "'duplicate definition' not in l2adverror.msg"
  

    # Delete the L2 advertisement and addresspool
    - name: Delete L2 advertisement
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: l2-adv
            namespace: metallb-system

    - name: Delete L2 address pool
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: ip-addresspool-l2
            namespace: metallb-system

    - name: Delete L2 address pool
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: ip-addresspool-l2-a
            namespace: metallb-system
  when: metallb_e2e
