---
# tasks file for playbooks/roles/ocp-metallb-operator

- name: Check if cluster operators and nodes are healthy
  include_role:
    name: check-cluster-health

- name: Clean up
  block:
  - name: Get the name of cluster service version
    shell: oc get clusterserviceversion -n metallb-system | awk '{ if ($1 ~ /metallb/) print $1 }'
    register: metallb_csv

  - name: Get the name of subscription
    shell: oc get subscription -n metallb-system | awk '{ if ($1 ~ /metallb/) print $1 }'
    register: metallb_subscription

  - name: Get the name of operator group
    shell: oc get operatorgroup -n metallb-system | awk '{ if ($1 ~ /metallb/) print $1 }'
    register: metallb_operator_group

  - name: Get the instance of the metallb operator
    shell: oc get metallb -n metallb-system -ojsonpath="{.items[].metadata.name}"
    register: metallb_instance
    ignore_errors: true

  - name: Delete the instance of the metallb operator
    kubernetes.core.k8s:
      state: absent
      api_version: metallb.io/v1beta1
      kind: MetalLB
      name: "{{ metallb_instance.stdout }}"
      namespace: metallb-system
    when: metallb_instance.stdout|length > 0

  - name: Delete the subscription if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1alpha1
      kind: Subscription
      name: "{{ metallb_subscription.stdout }}"
      namespace: metallb-system
    when: metallb_subscription.stdout|length > 0

  - name: Delete the operator group if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1
      kind: OperatorGroup
      name: "{{ metallb_operator_group.stdout }}"
      namespace: metallb-system
    when: metallb_operator_group.stdout|length > 0

  - name: Delete the cluster service version if exists
    kubernetes.core.k8s:
      state: absent
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      name: "{{ metallb_csv.stdout }}"
      namespace: metallb-system
    when: metallb_csv.stdout|length > 0

  - name: Check if all the pods has been deleted
    shell: oc get pods -n metallb-system --no-headers | wc -l
    register: metallb_pods
    until: metallb_pods.stdout|int == 0
    retries: 15
    delay: 60

  - name: Get custom resource definitions
    shell: oc get crd | awk '{print $1}'| grep metallb
    register: metallb_crds
    ignore_errors: true

  - name: Delete the custom resource definition if exists
    shell: oc delete crd {{ item }}
    loop: "{{ metallb_crds.stdout_lines }}"
    when: metallb_crds.stdout_lines|length > 0

  - name: Delete the MetalLB Operator if exists
    kubernetes.core.k8s:
      state: absent
      kind: Operator
      name: metallb-operator.metallb-system

  - name: Delete the namespace if exists
    kubernetes.core.k8s:
      state: absent
      kind: Namespace
      name: metallb-system

  - name: Check if the namespace gets deleted
    shell: oc get namespace --no-headers | grep metallb | wc -l
    register: metallb_namespace
    until: metallb_namespace.stdout|int == 0
    retries: 15
    delay: 30

  - name: Delete the workspace
    file:
      path: "{{ metallb_directory }}"
      state: "absent"
      mode: '0755'
  when: metallb_cleanup


- name: Deploy the MetalLB Operator
  block:
  - name: Setup custom catalog source
    block:
    - name: Include the global-secret-update role
      include_role:
          name: global-secret-update

    - name: Set fact variable for catalog source name
      set_fact:
        metallb_catalogsource: "metallb-custom-catalogsource"

    - name: Include role to create image content source policy and catalog source
      include_role:
        name: set-custom-catalogsource
      vars:
        custom_catalogsource_name: "{{ metallb_catalogsource }}"
        custom_catalogsource_display_name: "MetalLB Operator catalog source"
        custom_catalogsource_image: "{{ metallb_catalogsource_image }}"
    when: metallb_catalogsource_image != '' and metallb_catalogsource_image != None

  - name: Create namespace for metallb operator
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          labels:
            pod-security.kubernetes.io/audit: privileged
            pod-security.kubernetes.io/enforce: privileged
            pod-security.kubernetes.io/warn: privileged
            security.openshift.io/scc.podSecurityLabelSync: "false"
            kubernetes.io/metadata.name: metallb-system
            name: metallb-system
          name: metallb-system
        spec:
          finalizers:
          - kubernetes

  - name: Create operator group for metallb operator
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1
        kind: OperatorGroup
        metadata:
          generateName: metallb-system-
          name: metallb-system
          namespace: metallb-system
            #spec:
            #targetNamespaces:
            #- metallb-system

  - name: Create subscription for metallb operator
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          labels:
            operators.coreos.com/metallb-operator.metallb-system: ""
          name: metallb-operator-sub
          namespace: metallb-system
        spec:
          channel: "{{ metallb_upgrade_channel }}"
          installPlanApproval: Automatic
          name: metallb-operator
          source: "{{ metallb_catalogsource }}"
          sourceNamespace: openshift-marketplace
  when: metallb_install_operator

- name: Validate operator deployment and deploy instance of the metallb operator
  block:
  - name: Check if the subscription has created
    shell: oc get subscription metallb-operator-sub -n metallb-system | wc -l
    register: metallb_operators_subscription
    until: metallb_operators_subscription.stdout|int == 2

  - name: Check if the cluster service version has succeeded
    shell: oc get clusterserviceversion -n metallb-system | awk '{ if (($1 ~ /metallb/) && $NF=="Succeeded") print $1 }' | wc -l
    register: metallb_operators_csv
    until: metallb_operators_csv.stdout|int == 1
    retries: 15
    delay: 120

  - name: Check if operator pod is running
    shell: oc get pod -n metallb-system | grep "Running" | wc -l
    register: metallb_operator_pods
    until: metallb_operator_pods.stdout|int == 2
    retries: 10
    delay: 60

  - name: Check if the install plan is in the namespace
    shell: oc get installplan -n metallb-system | grep "install" | grep "metallb" | wc -l
    register: metallb_install_plan
    until: metallb_install_plan.stdout|int == 1

  - name: Create instance of the metallb operator
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: MetalLB
        metadata:
          name: metallb
          namespace: metallb-system

  - name: Check if all the pods are running
    shell: oc get pods -n metallb-system --no-headers | grep -v "Running\|Completed" | wc -l
    register: metallb_pods
    until: metallb_pods.stdout|int == 0 and metallb_pods.stderr == ""
    retries: 10
    delay: 60

  - name: Check if the deployment for the controller is running
    shell: oc get deployment -n metallb-system controller | awk '{if ($1 ~ /controller/) print $4}'
    register: metallb_controller
    until: metallb_controller.stdout|int == 1
    retries: 10
    delay: 40

  - name: Check the number of nodes running
    shell: oc get node | grep "Ready" | wc -l
    register: metallb_nodes
  - debug:
      msg: 
      - metallb_nodes {{metallb_nodes}}
  - name: Check if the daemon set for the speaker is running
    shell: oc get daemonset -n metallb-system speaker | awk '{if ($1 ~ /speaker/) print $6}'
    register: metallb_speaker
    until: metallb_speaker.stdout|int == metallb_nodes.stdout|int
    retries: 10
    delay: 60
  - debug:
      msg:
      - metallb_speaker {{metallb_speaker}}
      - metallb_nodes {{metallb_nodes}}
  when: metallb_install_operator or metallb_e2e

- name: Run e2e test cases
  block:
  - name: Install dependencies for running e2e tests
    dnf:
      name: make
      state: present

  - name: Include role for installation of Go lang
    include_role:
      name: golang-installation
    vars:
      go_tarball: "{{ metallb_golang_tarball }}"
      golang_path: "/usr/local"

  - name: Clone the metallb-operator repository
    git:
      repo: "{{ metallb_e2e_git_repository }}"
      dest: "{{ metallb_directory }}/metallb-operator"
      version: "{{ metallb_git_branch }}"

  - name: Run metallb-operator e2e tests
    shell: make test-e2e > {{ metallb_directory }}/metallb_e2e_output.txt
    args:
      chdir: "{{ metallb_directory }}/metallb-operator"
    ignore_errors: true
    environment: "{{ metallb_e2e_env }}"

  - name: Removing the color codes from output
    ansible.builtin.replace:
      path: "{{ metallb_directory }}/metallb_e2e_output.txt"
      regexp: '\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])'
      replace: ""
  when: metallb_e2e
- name: Validate the controller and speaker pods can be scheduled on the tainted nodes based on the tolerations in metallb CR
  block:
    - name: Check the number of nodes running
      shell: oc get node | grep "Ready" | wc -l
      register: metallb_nodes

    - name: Check if the daemon set for the speaker is running before tainting
      shell: oc get daemonset -n metallb-system speaker | awk '{if ($1 ~ /speaker/) print $6}'
      register: metallb_speaker_untainted
      until: metallb_nodes.stdout|int == metallb_speaker_untainted.stdout|int
      retries: 10
      delay: 60

    - name: Taint master and worker nodes
      shell: |
        oc adm taint node master-0 master-group=infra:NoSchedule
        oc adm taint node worker-0 worker-group=infra:NoSchedule
      register: taint_output
      ignore_errors: true

    - name: Create a metalLB CR with tolerations for worker-group in both controller and speaker pods
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
          spec:
            controllerTolerations:
              - effect: NoSchedule
                key: worker-group
                operator: Equal
                value: infra
            logLevel: debug
            speakerTolerations:
              - effect: NoSchedule
                key: worker-group
                operator: Equal
                value: infra

    - name: Check if all the pods are running
      shell: oc get pods -n metallb-system --no-headers | grep -v "Running\|Completed" | wc -l
      register: metallb_pods
      until: metallb_pods.stdout|int == 0 and metallb_pods.stderr == ""
      retries: 10
      delay: 30

    - name: Check if the deployment for the controller is running
      shell: oc get deployment -n metallb-system controller | awk '{if ($1 ~ /controller/) print $4}'
      register: metallb_controller
      until: metallb_controller.stdout|int == 1
      retries: 10
      delay: 40
    
    - name: Check if the daemon set are created properly
      shell: oc get daemonset -n metallb-system speaker | awk '{if ($1 ~ /speaker/) print $6}'
      register: metallb_speaker
      until: metallb_speaker.stdout|int == metallb_speaker_untainted.stdout|int-1
      retries: 10
      delay: 40

    - name: Get the instance of the metallb operator
      shell: oc get metallb -n metallb-system -ojsonpath="{.items[].metadata.name}"
      register: metallb_instance
      ignore_errors: true

    - name: Delete the MetalLB CR which has toleration for worker group
      kubernetes.core.k8s:
        state: absent
        api_version: metallb.io/v1beta1
        kind: MetalLB
        name: "{{ metallb_instance.stdout }}"
        namespace: metallb-system
      when: metallb_instance.stdout|length > 0

    - name: Check if the speakers are deleted
      shell: oc get daemonset -n metallb-system speaker
      register: metallb_speaker
      ignore_errors: true
      failed_when: "'NotFound' not in metallb_speaker.stderr"

    - name: Create a metalLB CR with tolerations for master-group in both controller and speaker pods
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: MetalLB
          metadata:
            name: metallb
            namespace: metallb-system
          spec:
            controllerTolerations:
              - effect: NoSchedule
                key: master-group
                operator: Equal
                value: infra
            logLevel: debug
            speakerTolerations:
              - effect: NoSchedule
                key: master-group
                operator: Equal
                value: infra

    - name: Check if the daemon set are created properly
      shell: oc get daemonset -n metallb-system speaker | awk '{if ($1 ~ /speaker/) print $6}'
      register: metallb_speaker
      until: metallb_speaker.stdout|int == metallb_speaker_untainted.stdout|int-1
      retries: 10
      delay: 40

    - name: Verify that no speaker pod is running on worker-0
      shell: oc get pod -n metallb-system -o wide | awk '{if (($1 ~ /speaker/) && ($7=="worker-0")) print $7}' | wc -l
      register: metallb_speaker
      failed_when: metallb_speaker.stdout|int > 0

    - name: Untaint master and worker nodes
      shell: |
        oc adm taint node master-0 master-group=infra:NoSchedule-
        oc adm taint node worker-0 worker-group=infra:NoSchedule-
      register: taint_output
      ignore_errors: true
  when: metallb_e2e

